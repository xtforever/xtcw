@class Wradio (Wheel)
@ Radio Widget - Nur Ein Widget einer Gruppe ist jeweils aktiv.
  Die Gruppe wird durch das Feld |radioGroup| identifiziert.
  Wird ein Widget aktiviert, wird das Feld
  |activeWidget| des |radioWidget| auf das zu aktivierende
  Widget gesetzt. War |activeWidget| gesetzt, wird das zugehörige
  Widget deaktiviert.



@PUBLIC
@var String label = <String> NULL
@var int cornerRoundPercent = 0
@var XtCallbackProc draw_override = NULL
@var int innerBorderPercent = 0
@var Pixel background_set = <String> "Darkgrey"
@var Pixel borderColAct   = <String> "Green"
@var Pixel borderColNorm  = <String> "Darkgrey"
@var String pixmapNames = <String> NULL
@var String radioGroup   = NULL
@var XtPointer radioData = NULL
@var int active = 0

@PRIVATE
@type pix_t = struct {
  char *fileName;
  Pixmap map,mask;
  XRectangle pm_rect;
  int pm_depth; }

@type radio_group_t = struct {
    char *name;
    Widget active;
}
@var radio_group_t *rg
@var XftDraw *draw
@var pix_t *pix
@var GC pix_gc

@var int label_width


@CLASSVARS
@var int rgroups = 0


@EXPORTS
@proc XtPointer wradio_data($)
{
        return $radioData;
}

@proc XtPointer wradio_active_data($)
{
        Widget w = rgroups_get_active_widget($);
        return w ? wradio_data(w) : NULL;
}

@proc wradio_select($)
{
	set($, 0,0,0 );
}

@proc wradio_deselect($)
{
    unset($, 0,0,0 );
}

@METHODS

@proc class_initialize {
        converters_init();
}

@proc initialize
{
  Display *dpy = XtDisplay($);
  char *s = $label;
  int w=10,h=10;

  /* init classvar
     wbuild |$| does not work for class_initialize
  */


  $pix=0;
  if( $pixmapNames ) $pix = load_pixmap($, $pixmapNames );
  if( ! s || ! *s )
    s=$name;
  $label = XtNewString(s);

  /* breite und höhe der Pixmap, falls vorhanden */

  xft_calc_string_size( $, $xftFont, s, &$label_width, 0 );
  if( $width == 0 ) {
      if( $pix ) w = $pix->pm_rect.width; else w = $label_width;
      $width = increase_by_percent( w, $innerBorderPercent );
  }

  if( $height == 0 ) {
      h = $pix ? $pix->pm_rect.height : $xftFont->height ;
      $height = increase_by_percent( h, $innerBorderPercent);
  }

  if( $draw_override == 0 )
    $draw_override = default_label_draw;

    int activate_me = $active;
    $rg = 0;
    if(! $radioGroup ) $radioGroup = $name;
    rgroup_lookup($);

    /* wir werden aktiviert, wenn wir die gruppe erzeugen
       falls die Gruppe schon existiert hat ist
       ein anderes widget aktiv und $active wird
       auf Null gesetzt.
    */

    if( activate_me ) { set($,0,0,0); notify($,0,0,0); }

}

@proc exec_command
{
  if( cmd == WHEEL_FIRE && $state == STATE_SELECTED ) {
      set($,0,0,0);
      notify($,0,0,0);
      return 1;
  }

  return 0;
}


@proc realize
 {
	XtCreateWindow($, (unsigned int) InputOutput,
        		  (Visual *) CopyFromParent, *mask, attributes);
        /* this gc is Not shared and its writeable */
        $pix_gc    = XCreateGC(XtDisplay($),XtWindow($),0,NULL );
  	reshape_widget($);
}

@proc resize
{
    if (XtIsRealized($)) reshape_widget($);
}

@proc destroy
{
  if( $draw) XftDrawDestroy( $draw );
  XtFree($label);
  if( $pix_gc ) XFreeGC(XtDisplay($),$pix_gc);
  if( $pix ) unload_pixmap( $, $pix );
  /* what if we are radioGroup and others want reach us ? */
}


@ ARGS: old, request, $, args, num_args_ptr
@proc set_values
{
  if ($label != $old$label) {
    XtFree($old$label);
    $label = XtNewString($label);
  }

  return True; /* redisplay widget */
}

@proc expose
{
  if( !XtIsRealized($)) return;
  Display *dpy = XtDisplay($);
  if( ! $draw ) {
    $draw = XftDrawCreate(dpy, XtWindow($),
			  DefaultVisual(dpy, DefaultScreen(dpy)), None);
    if( ! $draw ) error(1,0,"%s: cannot create xftdraw", $name );
  }

  if( $draw_override ) {
      $draw_override( $, NULL, $draw );
      return;
  }
}


@UTILITIES

@proc Widget lookup_widget($, char *name)
{
    int numKids, child;
    Widget    *wl, parent, ref;
    ref=$;
    while( (parent = XtParent( ref )) )
	{
	    if ( XtIsComposite( parent ) ) {
		CompositeWidget cw = (CompositeWidget)parent;
		wl = cw->composite.children;
		child = 0;
		numKids = cw->composite.num_children;
		while( child < numKids ) {
		    if( strcmp( XtName( wl[child] ), name ) == 0 ) return wl[child];
		    child++;
		}
	    }
	    ref=parent;
	}
    return 0;
}

@proc reshape_widget($)
{
	int w;
	if( $cornerRoundPercent >0 && $cornerRoundPercent < 100 ) {
	    w = Min($height,$width);
	    w = w * $cornerRoundPercent / 100;
	    XmuReshapeWidget( $, XmuShapeRoundedRectangle, w, w );
	}

        if( $pix ) {
            pix_t *p = $pix;
	    /* initialise pixmap position and mask */
               /* center pixmap */
            p->pm_rect.x  = ($width - p->pm_rect.width) / 2;
            p->pm_rect.y  = ($height - p->pm_rect.height) / 2;
               /* create mask for transparent background */

            if( $pix_gc ) {
      	        XSetClipMask(XtDisplay($), $pix_gc,  p->mask);
      	        XSetClipOrigin(XtDisplay($), $pix_gc,
                               p->pm_rect.x, p->pm_rect.y );
            }
        }
}

@proc default_label_draw($,void *a, void *b)
{
  int x,y;
  XRectangle rect;

  char *s = $label;
  Display *dpy = XtDisplay($);

  wheel_state st = $state;
  if( $active && st == STATE_NORMAL ) st = STATE_ARMED;

  if( $active )
       XSetWindowBorder( dpy, XtWindow($), $borderColAct );
  else XSetWindowBorder( dpy, XtWindow($), $borderColNorm );

  if( $pix ) {
        pix_t *p = $pix;
	XCopyArea(dpy, p->map, XtWindow($), $pix_gc,
	          0, 0, p->pm_rect.width, p->pm_rect.height,
   	      	  p->pm_rect.x, p->pm_rect.y );
        return;
  }


  /* falls es keine Pixmap gibt verwende |label| und setze */
  /* die Hintergrundfarbe passend zum aktuellen Zusatand */
  XFillRectangle( dpy, XtWindow($), $gc[st], 0,0, $width, $height );

  if( s && *s ) {

    y = ($height - $xftFont->height)/2;
    x = ($width - $label_width) /2;
    rect.x = 0; rect.y=0; rect.width=$width; rect.height=$height;
    XftDrawSetClipRectangles( $draw,0,0,&rect, 1);
    XftDrawStringUtf8($draw,$xft_col + st, $xftFont,
    			     x,y+$xftFont->ascent, (FcChar8*)s, strlen(s) );
    XftDrawSetClip($draw,0);

  }
}

@ suche nach widget |$| in der radio group |$radioGroup|
  falls noch nicht vorhanden wird eine neue Gruppe
  angelegt.
  returns: active widget
@proc Widget rgroup_lookup($)
{
    int p;
    if( !$rgroups )
    {
		$rgroups = m_create(5,sizeof(radio_group_t));
		printf("Group created:%d,%s\n", $rgroups, $radioGroup);
	}

    /* radio group finden */
    if( $rg == NULL ) {
        p = m_lookup_str( $rgroups, $radioGroup, -1 );
        if( p >= 0 )
		{
			$rg = mls( $rgroups, p );
		}
        else
        {   /* radio group anlegen ? */
            $rg = m_add($rgroups);
            $rg->name = strdup( $radioGroup );
            $rg->active  = $;
            $active = True;
        }
    }

    if( $rg->active == 0 ) $rg->active  = $;
    return $rg->active;
}

@proc Widget rgroups_get_active_widget($)
{
	//might be reallocated, so we need to update the ptr
	int p = m_lookup_str( $rgroups, $radioGroup, -1 );
    if(p >= 0)
		$rg = mls( $rgroups, p );
    else
		$rg = 0;
    if(! $rg ) ERR("Widget %s is not registered in any radio group", $name );
    return ( $rg->active );
}

@proc void rgroups_set_active_widget($)
{
	int p = m_lookup_str( $rgroups, $radioGroup, -1 );
    if(p >= 0)
		$rg = mls( $rgroups, p );
    else
		$rg = 0;
    if(! $rg ) ERR("Widget %s is not registered in any radio group", $name );
    $rg->active = $;
}


@proc pix_t *load_pixmap($, char *s)
{
	pix_t *p = calloc( 1,sizeof( pix_t ));
	if( load_pix($,s, p ) )
 	{
		free(p);
		return 0;
	}
	return p;
}


@proc unload_pixmap($, pix_t *p)
{
	XFreePixmap( XtDisplay($), p->map );
	XFreePixmap( XtDisplay($), p->mask );
	free( p );
}

@ load a pixmap. store information about pixmap in |*p|.
  the filename ptr is stored too - but not a copy of that string.
@proc int load_pix( $, char *name, pix_t *p )
{
  Display *dpy = XtDisplay($);
  unsigned int width, height, bw, depth;
  Window win;
  int err,x,y;

  if( load_pixmap_from_file($, name, & p->map, & p->mask) )
    return -1;

  if (! XGetGeometry(dpy, p->map, &win, &x, &y, &width, &height, &bw, &depth))
    return -1;

  /* printf("loading success %s\n", name ); */
  p->fileName = name;
  p->pm_rect.width  = (unsigned short) width;
  p->pm_rect.height = (unsigned short) height;
  p->pm_depth = depth;
  return 0;
}

@TRANSLATIONS
@trans   <Btn1Down>:     set() notify()
@trans   <LeaveWindow>: reset()

@ACTIONS

@proc highlight
{
  if( $state == STATE_SELECTED ) return;
  $state = STATE_SELECTED;
  $expose($,NULL,NULL);
}

@proc reset
{
  if( $state == STATE_NORMAL ) return;
  $state = STATE_NORMAL;
  $expose($,NULL,NULL);
}

@proc unset
{
    $active = 0;
    $expose($, NULL,NULL );
}

@proc set
{
    $active = 1;
    Widget w = rgroups_get_active_widget($);
    if( w && w != $ ) unset(w, 0,0,0 );
    rgroups_set_active_widget($);
    $expose($, NULL,NULL );
}

@proc toggle
{
   if( $active ) unset($,0,0,0); else set($,0,0,0);
}

@proc notify
{
  XtCallCallbackList( $, $callback, event );
}

@IMPORTS

@incl <X11/Xft/Xft.h>
@incl <X11/Xmu/Converters.h>
@incl "mls.h"
@incl "xutil.h"
@incl "converters.h"
@incl "error.h"
