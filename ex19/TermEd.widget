@CLASS TermEd ( Core )

@PUBLIC
@var int gWidth = 40
@var int gHeight = 25
@var int size = 8
@var int selTime = 400
@var String text = <String> "Hello World\nHow are you?"
@var <XftColor> XftColor fg = <String> "White"
@var <XftColor> XftColor bg = <String> "Darkgreen"
@var <XftColor> XftColor cbg = <String> "Red"
@var <XftColor> XftColor cfg = <String> "Green"

@PRIVATE
@var XtIntervalId timerid
@var Boolean blink
@var XftFont *xftFont
@var XftDraw *draw
@var XftColor* col[4]
@var uint32_t *scr
@var int grid_pix_width
@var int grid_pix_height
@var Bool selection_visible
@var XRectangle rsel
@var XRectangle rsel_old
@var GC gc_copy
@var uint8_t *cmd
@var uint cmd_len
@var int progm
@var struct fork2_info *child
@var XtInputId cid
@var XtInputId eid

@methods
@proc class_initialize { converters_xft_init(); }

@proc initialize
{
    FcChar32 bat = 0x42;
    XGlyphInfo extents;
    Display *dpy = XtDisplay($);
    font_load($,$size);
    XftTextExtents32(dpy, $xftFont, &bat, 1, &extents);
    $height = ($grid_pix_height = $xftFont->ascent + $xftFont->descent) * $gHeight;
    $width  = ($grid_pix_width = extents.width) * $gWidth;
    $draw=0;
    $cmd=0;
    $scr=0;
    $child=0;
    $col[0] = & $fg;
    $col[1] = & $bg;
    $col[2] = & $cfg;
    $col[3] = & $cbg;
    $selection_visible = False;
    $timerid = 0;
    $gc_copy =  XtGetGC($, 0,0 );
    $progm = m_create(100,sizeof(char*));
    do_resize($);

}

@proc destroy
{
    if( $draw) XftDrawDestroy( $draw );
    $draw=0;
    font_free($);
    if( $scr ) { free($scr); $scr=0; }
    if( $cmd ) { free($cmd); $cmd=0; }
    if( $progm ) { m_free_strings( $progm, 0); $progm=0; }
    if( $child ) prog_kill($);

}

@proc set_values
{
    if( $old$size != $size ) {
        font_free($);
        font_load($,$size);
        $resize( $ );
    }
    return True; /* call expose */
}

@proc resize
{
    $gWidth  = $width / $grid_pix_width;
    $gHeight = $height / $grid_pix_height;
    do_resize($);
}

@proc expose
{
    Display *dpy = XtDisplay($);
    if(!$draw )
        $draw = XftDrawCreate(dpy, XtWindow($),
                              DefaultVisual(dpy, DefaultScreen(dpy)), None);
    test_convert($);
    full_draw($);
    selection_draw($);
    /*   FcChar32 bat = 0xf240 + $status;
        XftDrawString32($draw, $col[$status],$xftFont,0,$xftFont->ascent,&bat,1);
    */
    printf("w WxH=%dx%d\n",$width, $height );
}


@UTILITIES
@proc font_free($)
{
    Display *dpy = XtDisplay($);
    if( $xftFont ) XftFontClose(dpy, $xftFont );
    $xftFont=0;
}

@proc font_load($,int size)
{
    Display *dpy = XtDisplay($);
    int screen = DefaultScreen(dpy);
    char fontname[30];
    sprintf(fontname, "Source Code Pro-%d", $size );
    font_free($);
    $xftFont = XftFontOpenName(dpy,screen, fontname );
}

@proc draw_glyph_color($, int x, int y, int fg, int bg, uint32_t ucs4 )
{
    int x0,y0,w,h;
    uint32_t glyph;

    x0 = x * $grid_pix_width;
    y0 = y * $grid_pix_height;
    w = $grid_pix_width;
    h = $grid_pix_height;

    if( bg >= 0 ) XftDrawRect($draw,$col[bg], x0,y0,w,h );
    if( ucs4 == 0 || ucs4 == 32 ) return;

    glyph = XftCharIndex ( XtDisplay($), $xftFont, ucs4 );
    XftDrawGlyphs ($draw, $col[fg], $xftFont,
                   x0, y0+$xftFont->ascent,
                   &glyph, 1);
}

@proc full_draw($)
{
    int x,y;
    XftDrawRect($draw,$col[1], 0,0, $width, $height );
    for(x=0;x<$gWidth;x++) {
        for(y=0;y<$gHeight;y++) {
            draw_glyph_color($,x,y,0,-1,$scr[x + y * $gWidth ] );
        }
    }
}

@proc putcharat($, int x, int y, uint32_t ucs4 )
{
    if( x < $gWidth && x >= 0 && y < $gHeight && y >= 0 )
        {
            $scr[x + y * $gWidth ] = ucs4;
        }
}

@proc uint32_t getcharat($, int x, int y )
{
    if( x < $gWidth && x >= 0 && y < $gHeight && y >= 0 )
        {
            return $scr[x + y * $gWidth ];
        }

    return 0;
}

@proc  drawcharat($, int x, int y, int fg, int bg )
{
    if( x < $gWidth && x >= 0 && y < $gHeight && y >= 0 )
        {
            draw_glyph_color($,x,y,fg,bg,$scr[x + y * $gWidth ] );
        }
}

@proc draw_string($,int x, int y, char *str)
{
    int len,l;
    unsigned char *string = (void*) str;
    uint32_t ucs4;
    len = strlen( (char*)string);
    x=0; y=0;
    while(1) {
        l = FcUtf8ToUcs4 (string, &ucs4, len);
        if( l<= 0 || len <=0 ) return;
        if( ucs4 == '\n' ) { x=0; y++; }
        if( x >= $gWidth ) { x=0; y++; }
        if( y >= $gHeight ) { y=0; }
        if( ucs4 >=' ' ) {
            putcharat($,x,y,ucs4);
            x++;
        }
        string += l;
        len -= l;
    }
}

@proc test_convert($)
{
    draw_string($, 0, $gHeight / 2, $text );
}

@proc selection_timer( $, XtIntervalId *id)
{
    int nr = $blink ? 2 : 0;
    if( $selection_visible ) {
        drawcharat($, $rsel_old.x, $rsel_old.y, nr, nr+1 );
        $blink = ! $blink;
        if( id==NULL && $timerid ) XtRemoveTimeOut($timerid);
        $timerid = XtAppAddTimeOut(XtWidgetToApplicationContext($), $selTime,
                        (void*)selection_timer, $ );
    }
    else $timerid=0;
}

@proc undraw_selection($)
{
    if( $selection_visible ) {
        drawcharat($, $rsel_old.x, $rsel_old.y, 0,1 );
        $selection_visible = False;
        if($timerid) {
            XtRemoveTimeOut($timerid);
            $timerid=0;
        }
    }
}

@proc selection_draw($)
{
    if( $rsel.x >= $gWidth ) $rsel.x = $gWidth-1;
    if( $rsel.y >= $gHeight ) $rsel.y = $gHeight-1;
    undraw_selection($);
    $selection_visible = True;
    $rsel_old = $rsel;
    $blink = True; selection_timer($,0);
}

@proc scr_scroll_up($)
{
        memcpy( $scr, $scr + $gWidth,
                ($gWidth*($gHeight-1))*4 );
        memset( $scr + $gWidth*($gHeight-1), 0, $gWidth*4 );
}

@proc pix_scroll_up($)
{
/*
      XCopyArea(display, src, dest, gc, src_x, src_y, width, height,  dest_x, dest_y)
      Display *display;
      Drawable src, dest;
      GC gc;
      int src_x, src_y;
      unsigned int width, height;
      int dest_x, dest_y;
*/
    XCopyArea(XtDisplay($), XtWindow($), XtWindow($), DefaultGC(XtDisplay($),0),
              0, $grid_pix_height,
              $grid_pix_width * ($gWidth),
              $grid_pix_height * ($gHeight-1),
              0,0 );

    /* clear background */
    XftDrawRect($draw,$col[1],
    0,      $grid_pix_height * ($gHeight-1),
    $width, $grid_pix_height );

}


@proc te_pos1($)
{
    $rsel.x = 0;
}

@proc te_tab($)
{
    int x = $rsel.x;
    x /= 8;
    x ++;
    x *= 8;
    if( x < $gWidth ) $rsel.x = x;
}

@proc te_down($)
{
    if( $rsel.y < ($gHeight-1) ) {
        $rsel.y++;
        return;
    }

    pix_scroll_up($);
    scr_scroll_up($);
}


@proc Bool te_parse($,uint32_t ucs4)
{
    switch( ucs4 ) {
    default: break;
    case 10: te_pos1($); te_down($); return True;
    case '\t': te_tab($); return True;
    case 13: te_pos1($); return True;
    }
    return False;
}

@proc te_right($)
{
    if( $rsel.x < ($gWidth-1) ) {
        $rsel.x++;
        return;
    }
    te_pos1($);
    te_down($);
}


@proc pix_del($)
{
   int x0,y0,x1,y1,w,h,x,y;
   x = $rsel.x; y=$rsel.y;
   /*-----------------------*/
   /* destination           */
   x0 = x;
   y0 = y;
   /*-----------------------*/
   /* width, height         */
   w = $gWidth - (x+1);
   h = 1;
   /*-----------------------*/
   /* source                */
   x1 = x0+1;
   y1 = y0;
   /*-----------------------*/
   /* transformation        */
   w   *= $grid_pix_width;
   x0  *= $grid_pix_width;
   x1  *= $grid_pix_width;
   h   *= $grid_pix_height;
   y0  *= $grid_pix_height;
   y1  *= $grid_pix_height;

   XCopyArea(XtDisplay($), XtWindow($), XtWindow($), DefaultGC(XtDisplay($),0),
             x1,y1,w,h, /* source */
             x0,y0      /* destination */
             );
}

@proc pix_ins($)
{
   int x0,y0,x1,y1,w,h,x,y;
   x = $rsel.x; y=$rsel.y;
   /*-----------------------*/
   /* destination           */
   x0 = x+1;
   y0 = y;
   /*-----------------------*/
   /* width, height         */
   w = $gWidth - (x+1);
   h = 1;
   /*-----------------------*/
   /* source                */
   x1 = x;
   y1 = y;
   /*-----------------------*/
   /* transformation        */
   w   *= $grid_pix_width;
   x0  *= $grid_pix_width;
   x1  *= $grid_pix_width;
   h   *= $grid_pix_height;
   y0  *= $grid_pix_height;
   y1  *= $grid_pix_height;

   XCopyArea(XtDisplay($), XtWindow($), XtWindow($), DefaultGC(XtDisplay($),0),
             x1,y1,w,h, /* source */
             x0,y0      /* destination */
             );
}

@proc te_ins($)
{
   int i,x,y;
   x = $rsel.x; y=$rsel.y;
   uint32_t *s = $scr+y* $gWidth;

   /* letztes zeichen der zeile mit <null> füllen */
   if( x == $gWidth -1 ) {
      s[x] = 0;
      return;
   }

   for(i=$gWidth-2; i>=x ; i-- )
              s[i+1] = s[i];
   pix_ins($);
   s[x] = 32;
}


@proc te_del($)
{
   uint16_t i,x,y;
   x = $rsel.x; y=$rsel.y;
   uint32_t *s = $scr+y* $gWidth;

   /* letztes zeichen der zeile mit <null> füllen */
   if( x == $gWidth -1 ) {
      s[x] = 0;
      return;
   }

   for(i=x+1; i< $gWidth; i++ )
              s[i-1] = s[i];
   pix_del($);
}


@proc te_putc($, uint32_t ucs4)
{
    if( $rsel.x >= $gWidth ) $rsel.x = $gWidth-1;
    if( $rsel.y >= $gHeight ) $rsel.y = $gHeight-1;
    if( te_parse($,ucs4) ) return;
    putcharat($, $rsel.x, $rsel.y,ucs4);
    drawcharat($, $rsel.x, $rsel.y, 0,1 );
    $selection_visible = False;
    te_right($);
}


@proc te_left($)
{
    if( $rsel.x == 0 ) return;
    $rsel.x--;
}


@proc exec_line($)
{
    int i,len, space_left;
    unsigned char *dest;
    // char *string = malloc( $gWidth * 6 + 2 );
    char *string = (void*)$cmd;
    uint32_t *s = $scr + $rsel.y * $gWidth;
    dest = (void*)string;
    space_left = $cmd_len;
    for( i=0; i< $gWidth; i++ )
        {
            if( space_left < 7 ) break;
            len = FcUcs4ToUtf8( *s++, dest );
            dest+=len;
            space_left -= len;
        }
    *dest = 0;
    printf("str: %s\n", string );

    /* check if there is a line number prefix */
    if(! prog_insert_line($, string) ) return;

    if( strncmp( string, "list", 4 ) == 0 ) prog_list($);
    else if( strncmp( string, "save", 4 ) == 0 ) prog_save($);
    else if( strncmp( string, "load", 4 ) == 0 ) prog_load($);
    else if( strncmp( string, "run", 3 ) == 0 ) prog_run($);
    else if( strncmp( string, "parse", 5 ) == 0 ) prog_parse($);
    else if( $child ) prog_interpret($);
}

@proc prog_interpret($)
{
    char *s = (void*)$cmd;
    while(*s && *s == '>' ) s++;
    dprintf( $child->fd[3], "%s\n", s );
}


@proc prog_child_read($, int *source, XtInputId *id)
{
    int ch;
    if( ! $child ) ERR("memory corruption");
    if( fork2_read($child) ) {
        prog_kill($);
        return;
    }
    undraw_selection($);
    while( (ch=mrb_get($child->buf)) >= 0 )
        te_putc( $, ch );
    selection_draw($);
}

@proc prog_child_err_read($, int *source, XtInputId *id)
{
    int len, i;

    if( ! $child ) ERR("memory corruption");
    char buf[1024];
    len = read( *source, buf, sizeof(buf) );

    undraw_selection($);
    for(i=0;i<len;i++)
        te_putc( $, buf[i] );
    selection_draw($);
}


@proc prog_run($)
{
        if( $child ) prog_kill($);
        $child = fork2_open( "lua5.3", "-i", NULL, "-e", "_PROMPT=''", NULL );
        $cid = XtAppAddInput( XtWidgetToApplicationContext($),
                       $child->fd[0],
                       (XtPointer)XtInputReadMask,
                       (XtInputCallbackProc)prog_child_read,
                       $ );

        $eid = XtAppAddInput( XtWidgetToApplicationContext($),
                       $child->fd[4],
                       (XtPointer)XtInputReadMask,
                       (XtInputCallbackProc)prog_child_err_read,
                       $ );



}


@proc char *progm_alloc($, uint32_t ln, char *s)
{
        char *buf = malloc( 5 + strlen(s) );
        *(uint32_t *)buf = ln;
        while( isspace(*s) ) s++;
        strcpy( buf +4, s );
        return buf;
}

@proc progm_insert($, int i, uint32_t arg, char *s)
{
        m_ins($progm,i, 1);
        STR($progm, i) = progm_alloc($,arg,s);
}

@proc progm_overwrite($, int i, uint32_t arg, char *s)
{
        free( STR($progm,i));
        STR($progm, i) = progm_alloc($,arg,s);
}

@proc progm_append($, uint32_t arg, char *s)
{
        char *buf = progm_alloc($,arg,s);
        m_put( $progm, &buf );
}


@ finde zeile |num| im puffer
  returns: match
  |*pos| == zeilennummer
  match == 0 : gefunden
  match <  0 : num größte zeile
  match >  1 : *pos größer als |num|
@proc int progm_find($, uint32_t num, int *pos)
{
        int i;
        uint32_t n;
        char *s;

        for(i=0;i<m_len($progm);i++) {
          s= STR($progm,i);
          n = *(uint32_t *) s;
          if( n == num ) { *pos=i; return 0; }
          else if( n > num ) { *pos=i; return 1; };
        }
        *pos = i;
        return -1;
}


@proc progm_put($, uint32_t arg, char *ln )
{
        int i;
        uint32_t n;
        char *s;

        for(i=0;i<m_len($progm);i++) {
          s= STR($progm,i);
          n = *(uint32_t *) s;
          if( n == arg ) { progm_overwrite( $, i, arg, ln ); return; }
          else if( n > arg ) { progm_insert($, i, arg, ln ); return; }
        }
        progm_append($,arg, ln );
}


@proc Bool prog_insert_line($, char *buf)
{
        char *s = (void*) buf;
        char *endp;
        int arg;

        arg = strtol( s,&endp,10);
        if( s == endp ) { return 1; }

        progm_put($, arg, endp );
        return 0;
}


@ load a program file to memory
  syntax: load filename


@proc prog_error( $, char *s )
{
        te_down($);
        te_pos1($);
        te_write($,s);
        te_down($);
        te_pos1($);
}


@proc prog_load($)
{
        char *s = (void*)$cmd+5;
        int p = m_create(20,1);

        while( *s && ! isspace(*s) )
               m_putc( p, *s++ );
        m_putc(p,0);

        FILE *fp = fopen( m_buf(p), "r" );
        if( !fp ) { prog_error( $, "file read error" ); goto leave; }
        m_clear(p);


        while( m_fscan2( p, '\n', fp ) == '\n' ) {
                prog_insert_line($,m_buf(p));
                m_clear(p);
        }

        fclose(fp);
        leave: m_free(p);

}


@ save a program file to filesystem
  syntax: save filename
@proc prog_save($)
{
        /* get two integer args */
        char *s = (void*)$cmd+5;
        int p = m_create(20,1);
        int i;

        while( *s && ! isspace(*s) )
               m_putc( p, *s++ );
        m_putc(p,0);

        FILE *fp = fopen( m_buf(p), "w" );
        if( !fp ) { prog_error( $, "file write error" ); goto leave; }

        for(i=0;i<m_len($progm);i++)
        {
                s = STR($progm,i);
                uint32_t n = *(uint32_t *)s; s+=4;
                fprintf(fp,"%u %s\n", n,s );
        }

        fclose(fp);
        leave: m_free(p);
}

@proc prog_parse($)
{

    if(! $child ) {
        prog_error($,"starting subshell with 'run'");
        prog_run($);
    }

    int from,len;

    from = 0;
    len  = m_len($progm);

    /* get two integer args */
    char *s = (void*)$cmd+6;
    char *endp;
    from = strtol( s,&endp,10);
    if( s == endp ) { from=0; goto cont; }

 cont:
    prog_do_parse($, from, len);
}

@proc prog_list($)
{
        int arg,from,len;

        from = 0;
        len  = 10;

        /* get two integer args */
        char *s = (void*)$cmd+5;
        char *endp;
        arg = strtol( s,&endp,10);
        if( s == endp ) { arg=0; goto cont; }

        s=endp; if( *s == ',' ) s++;
        from = arg;
        arg = strtol( s,&endp,10);
        if( s == endp ) { arg=0; goto cont; }
        len = arg;

        cont:
        te_pos1($); te_down($);
        prog_do_list($, from, len);
}


@proc te_write($, char *str)
{
    int len,l;
    unsigned char *string = (void*) str;
    uint32_t ucs4;
    len = strlen( (char*)string);

    while(1) {
        l = FcUtf8ToUcs4 (string, &ucs4, len);
        if( l<= 0 || len <=0 ) return;
        te_putc($,ucs4);
        string += l;
        len -= l;
    }
}

@proc te_writeln($,char *s)
{
        te_write($,s);
        te_pos1($);
        te_down($);
}


@proc prog_print($, int i)
{
        char buf[20];


        char *s = STR($progm,i);
        uint32_t num = *(uint32_t *)s;
        s+=4;

        sprintf(buf,"%d", num);
        te_write($,buf);
        te_putc($,32);
        te_write($,s);
}

@proc prog_do_list($, int from, int len)
{
        int i;
        int line;

        int match  = progm_find( $, from, &line );
        if( match < 0 ) return;

        for(i=line;i<line+len;i++) {
                if( i >= m_len($progm) ) break;
                prog_print($,i);
                te_pos1($);
                te_down($);
        }
}

@proc prog_do_parse($, int from, int len)
{
        int i;
        int line;

        int match  = progm_find( $, from, &line );
        if( match < 0 ) return;

        for(i=line;i<line+len;i++) {
                if( i >= m_len($progm) ) break;
                char *s = STR($progm,i);
                s+=4;
                dprintf( $child->fd[3], "%s\n", s );
        }
}



@proc prog_kill($)
{
        if( $child ) {
            fork2_close( $child );
            $child=0;
        }
        if( $cid ) { XtRemoveInput($cid); $cid=0; }
        if( $eid ) { XtRemoveInput($eid); $eid=0; }
}

@proc do_resize($)
{
    $scr=realloc($scr, $gWidth * $gHeight * 4 );
    memset($scr,0,$gWidth * $gHeight * 4 );
    $cmd=realloc($cmd,$cmd_len = ($gWidth+2) * 6 );
    printf("WxH=%dx%d\n",$gWidth, $gHeight );
    printf("pix WxH=%dx%d\n",$grid_pix_width, $grid_pix_height );
    printf("w WxH=%dx%d\n",$width, $height );
}


@TRANSLATIONS
@trans   <Key>Right:       forward_char()
@trans   <Key>Left:        backward_char()
@trans   <Key>Up:          prev_line()
@trans   <Key>Down:        next_line()
@trans   <Key>Return:      key_return()
@trans   <Key>Delete:      key_del()
@trans   <Key>BackSpace:   key_backspace()
@trans   <Key>Escape:      kill_child()
@trans   <Key>:            insert_char()


@ACTIONS

@proc kill_child
{
    undraw_selection($);
    te_writeln($, "kill");
    prog_kill($);

    selection_draw($);
}

@proc key_del
{
    undraw_selection($);
    te_del($);
    selection_draw($);
}

@proc key_backspace
{
    undraw_selection($);
    te_left($);
    te_del($);
    selection_draw($);
}


@proc key_return
{
    undraw_selection($);
    exec_line($);
    te_pos1($);
    te_down($);
    selection_draw($);
}


@proc insert_char
{
    int len;
    unsigned char buf[32];
    KeySym key_sim;
    uint32_t ucs4;

    len = _XawLookupString($,(XKeyEvent *) event, (char*)buf,sizeof buf, &key_sim );
    if (len <= 0) return;
    FcUtf8ToUcs4 (buf, &ucs4, len);
    undraw_selection($);
    te_ins($);
    te_putc($,ucs4);
    selection_draw($);
}



@proc prev_line
{
    if( $rsel.y == 0 ) return;
    $rsel.y--;
    selection_draw($);
}

@proc next_line
{
    undraw_selection($);
    te_down($);
    // if( $rsel.y < ($gHeight-1) )
    // $rsel.y++;
    selection_draw($);
}

@proc backward_char
{
    if( $rsel.x == 0 ) return;
    $rsel.x--;
    selection_draw($);
}

@proc forward_char
{
    if( $rsel.x < ($gWidth-1) )
        $rsel.x ++;
    selection_draw($);
}



@IMPORTS

@incl <stdint.h>
@incl "mls.h"
@incl "xutil.h"
@incl "micro_vars.h"
@incl "converters-xft.h"
@incl "subshell.h"

@incl <X11/Xaw/XawImP.h>
