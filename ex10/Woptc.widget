@class Woptc (Core)

@PUBLIC
@ diese variable gibt den status des gezeichneten kreises an
  bei |True| wird der Kreis gefÃ¼llt.
@var Boolean status = False
@var Pixel foreground = XtDefaultForeground
@var int lineWidth = 1
@var Boolean useCairo = True

@PRIVATE
@var GC gc
@var cairo_surface_t *cs

@METHODS
@proc initialize
{
  XGCValues     values = {
  		foreground: $foreground,
 		line_width: $lineWidth,
  		graphics_exposures: False };
  uint          mask = GCForeground | GCLineWidth | GCGraphicsExposures;
  $gc = XtGetGC($, mask, &values);
  if( $width == 0 ) $width=10;
  if( $height == 0 ) $height=10;
  $cs=0;
}

@proc resize
{
    cs_destroy($);
}

@proc destroy
{
  if( $gc) XtReleaseGC($,$gc);
  cs_destroy($);
}

@ ARGS: old, request, $, args, num_args_ptr
@proc set_values
{
  return True; /* call expose */
}

@proc expose
{
  if( !XtIsRealized($)) return;
  update($);
}

@UTILITIES
@proc cs_create($)
{
    if( ! $useCairo ) return;
    if( $cs ) cs_destroy($);
    Display *dpy = XtDisplay($);
    $cs=cairo_xlib_surface_create(dpy,XtWindow($),
				  DefaultVisual(dpy, DefaultScreen(dpy)),
				  $width, $height);
}

@proc cs_destroy($)
{
    if( ! $useCairo ) return;
    if( $cs ) cairo_surface_destroy($cs);
    $cs=0;
}

@proc update($)
{
    XClearWindow( XtDisplay($), XtWindow($) );

    if( $useCairo )
	DrawCircle_c( $, 0,0, $width, $height, $status );
    else
        DrawCircle( $, 0,0, $width, $height, $status );
}

@def Max(a,b) = (a>b) ? a : b
@def Min(a,b) = (a>b) ? b : a

@proc DrawCircle_c($,uint x, uint y, uint w, uint h, Boolean filled)
{
    double radius;
    cairo_t *c;
    if( ! $cs ) cs_create($);
    h = Min(h,w);
    radius = (h/2) - ($lineWidth/2);
    c=cairo_create($cs);
    cairo_arc (c, h/2, h/2, radius, 0.0  * (M_PI/180.0), 360.0  * (M_PI/180.0) );
    cairo_set_line_width (c, $lineWidth);
    cairo_set_source_rgb_from_pixel($,c,$foreground);
    /*    cairo_set_source_rgb(c, r,g,b ); */
    if( filled ) cairo_fill(c); else cairo_stroke (c);
    cairo_show_page(c);
    cairo_destroy(c);
}

@ Draw a circle inside the Bounding Box x,y,w,h
  if |filled| is true, it draws a filled circle
  it uses $gc for drawing
@proc DrawCircle($,uint x, uint y, uint w, uint h, Boolean filled)
{
  uint lw = $lineWidth / 2;
  x+=lw; y+=lw; h-=2*lw; w-=2*lw;
  h = Min(h,w);

  Display *dpy = XtDisplay($);
  Window win   = XtWindow($);
  if( filled )
	XFillArc( dpy, win, $gc, x,y,h,h, 0,360*64 );
  else
        XDrawArc( dpy, win, $gc, x,y,h,h, 0,360*64 );
}

@proc uint get_component( Pixel px, ulong m )
{
    ulong p = px & m;
    while( m && !(m&1) ) { m>>=1; p >>=1; }
    return p;
}
@proc cairo_set_source_rgb_from_pixel($, cairo_t *c, Pixel px)
{
    Display *dpy = XtDisplay($);
    Visual *v = DefaultVisual(dpy,DefaultScreen(dpy));
    uint r,g,b;
    r = get_component( px, v->red_mask );
    g = get_component( px, v->green_mask );
    b = get_component( px, v->blue_mask );
    cairo_set_source_rgb(c, r / 255.0 ,g / 255.0, b / 255.0 );
}

@TRANSLATIONS
@trans <BtnDown>: switch_state()

@ACTIONS
@proc switch_state
{
  $status = ! $status;
  update($);
}

@IMPORTS
@incl <math.h>
@incl <cairo/cairo.h>
@incl <cairo/cairo-xlib-xrender.h>
@incl <cairo/cairo-xlib.h>
@incl "xutil.h"
