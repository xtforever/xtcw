@class Wheel (Core)

@ simple Wheel Input widget

@PUBLIC

@var <XftFont> XftFont* xftFont = <String> "Sans-22"
@var <Callback> XtCallbackList callback   = NULL
@var <Pixel> Pixel bg_norm = <String>  "lightblue"
@var <Pixel> Pixel bg_sel   = <String>  "yellow"
@var <Pixel> Pixel bg_hi    = <String>  "red"
@var <Pixel> Pixel fg_norm = <String>  "black"
@var <Pixel> Pixel fg_sel   = <String>  "green"
@var <Pixel> Pixel fg_hi    = <String>  "white"
@var int user_data = 0
@var String focus_group = <String> ""
@var int state = 0
@var Boolean register_focus_group = True

@EXPORTS

@type wheel_state = enum {
  STATE_NORMAL = 0,
  STATE_SELECTED = 1,
  STATE_ARMED = 2,
  STATE_MAX = 3
}

@type wheel_cmd = enum {
      WHEEL_NOCOMMAND,
      WHEEL_LEFT,
      WHEEL_RIGHT,
      WHEEL_FIRE,
      WHEEL_KEYPAD
}

@type wheel_colors = enum {
 COLOR_FG_NORM, COLOR_FG_SEL, COLOR_FG_HI, COLOR_BG_NORM, COLOR_BG_SEL, COLOR_BG_HI
}
@def COLOR_FG_MAX = 3


@type wheel_gcs = enum {
 GC_BG_NORM, GC_BG_SEL, GC_BG_HI
}


@proc int wheel_exec_command($, int cmd, int val)
{
  if( XtIsSubclass( $, wheelWidgetClass) && $exec_command )
    {
      return $exec_command($,cmd,val);
    }

  XtWarning( "Widget is not subclass of wheel" );
  return 0;
}

@proc int wheel_sig_recv($, Widget from, int type, void *class, void *data )
{
  if( XtIsSubclass( $, wheelWidgetClass) && $sig_recv )
    {
      return $sig_recv($,from,type,class,data);
    }

  XtWarning( "Widget is not subclass of wheel" );
  return 0;
}

@PRIVATE

@ vorderung und hintergrund farben
@var Pixel pixel[6]

@ vorderung und hintergrund farben
@var XftColor xft_col[6]

@ zum l√∂schen des hintergrundes
@var GC gc[3]

@METHODS

@proc class_initialize { converters_xft_init(); }

@proc int exec_command($, int cmd, int val)
{
      XtWarning( "Wheel Widget needs exec_command to be redefined" );
      return 0;
}

@proc int sig_recv ($, Widget from, int type, void *class, void *data )
{
  XtWarning( "Wheel Widget needs sig_recv to be redefined" );
  return 0;
}


@proc set_values
{
    Bool t = False;
    if( $old$fg_norm != $fg_norm ) { t=True;
        col_set($,COLOR_FG_NORM); }
    if( $old$fg_sel != $fg_sel ) { t=True;
        col_set($,COLOR_FG_SEL); }
    if( $old$fg_hi != $fg_hi ) { t=True;
        col_set($,COLOR_FG_HI); }
    if( $old$bg_norm != $bg_norm ) { t=True;
        col_set($,COLOR_BG_NORM); }
    if( $old$bg_sel != $bg_sel ) { t=True;
        col_set($,COLOR_BG_SEL); }
    if( $old$bg_hi != $bg_hi ) { t=True;
        col_set($,COLOR_BG_HI ); }
    if( $old$xftFont != $xftFont ) { t=True;
        XftFontClose(XtDisplay($),$old$xftFont); }
    return t;
}


@proc initialize
{
  int i;
  memset( $gc, 0, sizeof( $gc ));
  memset( $xft_col, 0, sizeof( $xft_col));
  for(i=0;i<6;i++)
      col_set($,i);

  $state = STATE_NORMAL;
  $background_pixel = $pixel[STATE_NORMAL+3];

  if( ! STR_IS_EMPTY($focus_group) && $register_focus_group ) {
      focus_add2( $, $focus_group );
  }

}

@proc destroy
{
  Display *dpy = XtDisplay($);

  int i;
  for(i=0;i<6;i++) {
    XftColorFree(dpy, DefaultVisual(dpy, DefaultScreen(dpy)),
		 None, $xft_col+i);
    if( i < 3 ) XtReleaseGC($,$gc[i]);
  }
}


@UTILITIES
@proc col_set($,int num)
{
    Display *dpy = XtDisplay($);
    XGCValues     values;

    switch( num ) {
    case COLOR_FG_NORM: $pixel[COLOR_FG_NORM]= $fg_norm; break;
    case COLOR_FG_SEL: $pixel[COLOR_FG_SEL]= $fg_sel; break;
    case COLOR_FG_HI: $pixel[COLOR_FG_HI]= $fg_hi; break;
    case COLOR_BG_NORM: $pixel[COLOR_BG_NORM]= $bg_norm; break;
    case COLOR_BG_SEL: $pixel[COLOR_BG_SEL]= $bg_sel; break;
    case COLOR_BG_HI: $pixel[COLOR_BG_HI]= $bg_hi; break;
    }

    /* !TODO! Check if Color is already alloced
      if( $xft_col[num] )
        XftColorFree(dpy, DefaultVisual(dpy, DefaultScreen(dpy)),
		 None, $xft_col+num);
    */
    xft_color_alloc( $, $pixel[num], $xft_col+num );

    if( num >= 3 ) {
        values.foreground = $pixel[num]; /* background color */
        if( $gc[num-3] ) XtReleaseGC($,$gc[num-3]);
        $gc[num-3] = XtGetGC($, GCForeground, &values);
    }
}


@IMPORTS

@incl <X11/Xft/Xft.h>
@incl "converters-xft.h"
@incl "focus-group.h"
@incl "apputil.h"
@incl "xutil.h"
