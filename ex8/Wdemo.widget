@class Wdemo (Core)
@ Demo widget: draw lines and text and use a callback function

@PUBLIC
@var <XftFont> XftFont* xftFont = <String> "Sans-22"
@var Pixel foreground = XtDefaultForeground
@var int lineWidth = 1
@var int cornerRoundPercent = 20
@var <Callback> XtCallbackList callback  = NULL
@var String label = NULL
@var String value = NULL

@PRIVATE
@var XftDraw *draw
@var GC gc[3]
@var XftColor xcol[2]
@var Pixmap pm
@var uint32_t changed

@def CHANGE_SIZE = 1
@def CHANGE_COLOR = 2
@def CHANGE_VALUE1 = 4
@def CHANGE_VALUE2 = 8
@def CHANGE_ALL = 12
@def BG = 0
@def FG = 1
@def CP = 2

@CLASSVARS

@var compress_exposure = XtExposeCompressSeries
@var visible_interest = True

@METHODS
@proc initialize
{
  int w,h;
  $draw=0;
  $pm=0;
  $changed=CHANGE_SIZE;
  $gc[0] = 0;
  calculate_prefered_size($,&w,&h);
  $width = w; $height = h;
}

@proc set_values
{
        $changed = 0;
        int i, p = 0;
        for(i=0;i<*num_args;i++) {
           if( strcmp(args[i].name, "label" ) == 0 ) {
               $changed |= CHANGE_VALUE1;
               p++;
           } else if( strcmp(args[i].name, "value" ) == 0 ) {
               $changed |= CHANGE_VALUE2;
               p++;
           }
        }

        if( p != *num_args ) $changed = CHANGE_COLOR;
        update($);
        return False; /* do NOT call expose() to update widget */
}

@proc destroy
{
        free_colors($);
        if( $draw ) XftDrawDestroy( $draw );
        if( $pm ) XFreePixmap(XtDisplay($),$pm);
}

@proc expose
{
        XTFUNC();
        draw_parts($,region);
        show_region(region);
}

@proc realize
 {
        XTFUNC();
	XtCreateWindow($, (unsigned int) InputOutput,
        		  (Visual *) CopyFromParent, *mask, attributes);
  	reshape_widget($);
        $changed = CHANGE_SIZE;
        update($);
}

@proc resize
{
    if (XtIsRealized($)) {
       XTFUNC();
       reshape_widget($);
       $changed = CHANGE_SIZE;
       update($);
    }
}

@UTILITIES

@proc update($)
{
        int bg_clear = 0;
        Region r = NULL;

        if( $changed == 0 ) return;

        TRACE(1, "changed: %d", $changed );

        if( $changed & CHANGE_SIZE ) {
            $changed = CHANGE_ALL;
            alloc_pixmap($);
        } else {
          if( $changed & CHANGE_COLOR ) {
            realloc_colors($);
            $changed = CHANGE_ALL;
          }
        }

        if( ($changed & CHANGE_ALL) == CHANGE_ALL ) {
          /* clear background */
          XFillRectangle(XtDisplay($),$pm, $gc[BG], 0,0, $width,$height );
          bg_clear = 1;
        }
        else r = XCreateRegion();

        if( $changed & CHANGE_VALUE1 ) {
            redraw_value1( $, bg_clear, r );
        }
        if( $changed & CHANGE_VALUE2 ) {
            redraw_value2( $, bg_clear, r );
        }

        draw_parts($,r);
        $changed = 0;
}


@  copy small region (with 1 rectangle) or complete region:
   i think two requests are taking more time than
   drawing some pixels
@proc draw_parts($,Region r)
{
  if( ! $visible ) return;
  XTFUNC();
  if( r != NULL )
      copy_rectangles($,r);
   else /* copy full pixmap */
      XCopyArea(XtDisplay($),$pm, XtWindow($), $gc[0],
              0,0,$width,$height,  /* source pixmap */
              0,0 ); /* target window x,y */
}

@ helper for draw_parts
@proc copy_rectangles($,Region r)
{
   if( !r ) return;
   XTFUNC();

   Box *b=&r->extents;
   XCopyArea(XtDisplay($),$pm, XtWindow($), $gc[0],
              b->x1, b->y1, b->x2, b->y2, /* source pixmap */
              b->x1, b->y1 ); /* target window x,y */
}


@proc show_region(Region tmp)
{
        if( !tmp ) return;
        Box *b = tmp->rects;
        int n = tmp->numRects;
        printf("Num Rects: %d\n", n );
        while( n-- ) {
               printf("%d,%d,%d,%d\n", b->x1, b->y1, b->x2, b->y2 );
               b++;
        }
        printf("Extents: ");
        b=&tmp->extents;
        printf("%d,%d,%d,%d\n", b->x1, b->y1, b->x2, b->y2 );
}

@proc redraw_value1($,int bg_clear, Region r)
{
        XTFUNC();
        if( ! bg_clear )
          XFillRectangle(XtDisplay($),$pm, $gc[BG], 0,0, $width,$height/2 );
        paint1($);

        if( r ) {
            XRectangle rec;
            rec.x = 0; rec.y   = 0;
            rec.width = $width; rec.height = $height;
            XUnionRectWithRegion(&rec,r,r);
        }
}

@proc redraw_value2($,int bg_clear, Region r)
{
        XTFUNC();
        if( ! bg_clear )
          XFillRectangle(XtDisplay($),$pm, $gc[BG], 0,$height/2, $width,$height/2 );

        int x,y;
        char *s = $value;
        if( is_empty(s) ) goto skip_draw;

        x = $width;
        x -= xft_textwidth( XtDisplay($), $xftFont, s );
        x /= 2;
        y = 0.75 * $height - $xftFont->height / 2;
        XftDrawStringUtf8($draw, $xcol + FG, $xftFont,
    	    x,y+$xftFont->ascent, (FcChar8*)s, strlen(s) );

        skip_draw:
          if( r ) {
            XRectangle rec;
            rec.x = 0; rec.y   = $height/2;
            rec.width = $width; rec.height = $height/2;
            XUnionRectWithRegion(&rec,r,r);
          }
}





@proc reshape_widget($)
{
	int w;
	if( $cornerRoundPercent >0 && $cornerRoundPercent < 100 ) {
	    w = Min($height,$width);
	    w = w * $cornerRoundPercent / 100;
	    XmuReshapeWidget( $, XmuShapeRoundedRectangle, w, w );
	}
}

@proc paint1($)
{
        XTFUNC();
        char *s = $label;
        int x,y,w,h;

        /* center text */
        h = $xftFont->height;
        w = xft_textwidth(XtDisplay($), $xftFont, s );
        x = ($width - w) / 2;
        y = (($height/2) -h) / 2;

        XftDrawStringUtf8($draw, $xcol + FG, $xftFont,
    			     x,y+$xftFont->ascent, (FcChar8*)s, strlen(s) );

        y = $height / 2 - $lineWidth / 2;
        XDrawLine(XtDisplay($), $pm, $gc[FG], 0, y, $width, y );

}

@proc calculate_prefered_size($,int *w, int *h)
{
  calculate_size($,w,h);
  (*w) += 20;
  (*h) += 20;
}


@proc calculate_size($,int *w, int *h)
{
        xft_calc_string_size($, $xftFont, $label, w, h );
        (*h) *= 2.5;
}


@proc make_resize_request($,int w, int h)
{
        Dimension w_out, h_out;
        if( XtMakeResizeRequest($,w,h, &w_out, &h_out ) ==
            XtGeometryAlmost ) XtMakeResizeRequest($,w_out,h_out,NULL,NULL );
}

@proc realloc_colors($)
{
  if( $gc[0] != 0 ) free_colors($);

  XGCValues     values = {
  		foreground: $background_pixel,
  		graphics_exposures: False,
                line_width: $lineWidth };
  uint          mask = GCForeground | GCGraphicsExposures |  GCLineWidth;
  $gc[BG] = XCreateGC(XtDisplay($), $pm, mask,&values);
  values.foreground = $foreground;
  $gc[FG] = XCreateGC(XtDisplay($), $pm, mask,&values);
  $gc[CP] = XCreateGC( XtDisplay($), $pm, 0,0 );
  xft_color_alloc( $, $background_pixel, $xcol+BG );
  xft_color_alloc( $, $foreground,       $xcol+FG );
}

@proc free_colors($)
{
        int i;
        Display *dpy = XtDisplay($);
        for(i=0;i<2;i++) {
                XFreeGC(XtDisplay($),$gc[i]);
                XftColorFree(dpy, DefaultVisual(dpy, DefaultScreen(dpy)),
		 None, $xcol+i);
        }
        XFreeGC(XtDisplay($), $gc[CP] );
}


@proc alloc_pixmap($)
{
  Display *dpy = XtDisplay($);
  if( $pm ) XFreePixmap(dpy, $pm);
  $pm = XCreatePixmap(dpy, XtWindow($), $width, $height,
                            DefaultDepth(dpy, DefaultScreen(dpy)));
  if( $draw )
        XftDrawChange($draw, $pm );
  else
        $draw = XftDrawCreate(dpy, $pm,
                       DefaultVisual(dpy, DefaultScreen(dpy)), None);

  realloc_colors($); /* the drawable has changed, we need new gc's */
}

@IMPORTS
@incl <assert.h>
@incl <stdint.h>
@incl <X11/Intrinsic.h>
@incl <X11/Xmu/Converters.h>
@incl <X11/Xft/Xft.h>
@incl <X11/Xregion.h>
@incl "converters.h"
@incl "xutil.h"
@incl "mls.h"
