@class Wdemo (Core)
@ Demo widget: draw a line  and a filled circle and use a callback function
  could be used for a slider


@CLASSVARS

@var XtEnum compress_exposure = TRUE

@PUBLIC
@var <XftFont> XftFont* xftFont = <String> "Sans-22"
@var Pixel foreground = XtDefaultForeground
@var int lineWidth = 1
@var int cornerRoundPercent = 20
@var <Callback> XtCallbackList callback  = NULL
@var String label = NULL
@ Position of Handle, instead using float this widget uses integer
  with a range of 0 to 10000
@var int handlePos = 5000
@var Distance handleSize = 20

@PRIVATE

@var xtcairo_t *pix
@var XftDraw *draw
@var GC gc[2]
@var XftColor xcol[2]
@var int drawn_handle
@def BG = 0
@def FG = 1
@def PIX_BUF = 0
@def PIX_EMPTY = 1
@def PIX_HANDLE = 2

@METHODS
@proc initialize
{
  int w,h;
  alloc_colors($);
  if(! $label ) $label = $name;
  calculate_prefered_size($,&w,&h);
  $width = w; $height = h;
  $pix=0;
  $draw=0;
  $drawn_handle = -1;
}


@proc set_values
{
    TRACE(1,"");
    int call_expose = 1;

    if( ($handleSize != $old$handleSize) ||
        ($handlePos  != $old$handlePos ) )
        {
            $drawn_handle = -1;
            update_pixmaps($);
        }

     if( ($foreground          != $old$foreground ) ||
        ($background_pixel    != $old$background_pixel ) ||
        ($width               != $old$width  ) ||
        ($height              != $old$height ) ) reinit($);

     return call_expose; /* call expose() to update widget */
}

@proc destroy
{
        free_colors($);
        XftDrawDestroy( $draw );
        xtcairo_destroy_pixmap($pix);
}

@proc expose
{
    TRACE(1,"");
    Display *dpy = XtDisplay($);
    if( ! $draw ) {
        $draw = XftDrawCreate(dpy, XtWindow($),
                              DefaultVisual(dpy, DefaultScreen(dpy)), None);
        assert( $draw );
    }

    paint($);
}

@proc realize
 {
	XtCreateWindow($, (unsigned int) InputOutput,
        		  (Visual *) CopyFromParent, *mask, attributes);
  	reshape_widget($);
        alloc_pixmaps($);
}

@proc resize
{
    if (XtIsRealized($)) {
        $drawn_handle = -1;
        reshape_widget($);
        alloc_pixmaps($);
    }
}

@UTILITIES

@proc reshape_widget($)
{
	int w;
	if( $cornerRoundPercent >0 && $cornerRoundPercent < 100 ) {
	    w = Min($height,$width);
	    w = w * $cornerRoundPercent / 100;
	    XmuReshapeWidget( $, XmuShapeRoundedRectangle, w, w );
	}
}

@proc paint($)
{
    TRACE(1,"%dx%d", $width, $height );
    update_pixmaps($);
    XCopyArea(XtDisplay($), $pix->p, XtWindow($), $gc[BG],
              0,0, $width, $height,
              0,0 );
}

@proc calculate_prefered_size($,int *w, int *h)
{
  calculate_size($,w,h);
  (*w) += 20;
  (*h) += 20;
}

@proc calculate_size($,int *w, int *h)
{
    *w = $handleSize * 4;
    *h = $handleSize + 4;
}

@proc reinit($)
{
        TRACE(1,"");
        free_colors($);
        alloc_colors($);
        int w,h;
        calculate_prefered_size($,&w,&h);
        make_resize_request($,w,h);
        $drawn_handle = -1;
}

@proc make_resize_request($,int w, int h)
{
        Dimension w_out, h_out;
        if( XtMakeResizeRequest($,w,h, &w_out, &h_out ) ==
            XtGeometryAlmost ) XtMakeResizeRequest($,w_out,h_out,NULL,NULL );
}

@proc alloc_colors($)
{
  XGCValues     values = {
  		foreground: $background_pixel,
  		graphics_exposures: False,
                line_width: $lineWidth };
  uint          mask = GCForeground | GCGraphicsExposures |  GCLineWidth;
  $gc[BG] = XtGetGC($, mask, &values);
  values.foreground = $foreground;
  $gc[FG] = XtGetGC($,mask,&values);
  xft_color_alloc( $, $background_pixel, $xcol+BG );
  xft_color_alloc( $, $foreground,       $xcol+FG );
}

@proc free_colors($)
{
        int i;
        Display *dpy = XtDisplay($);
        for(i=0;i<2;i++) {
                XtReleaseGC($,$gc[i]);
                XftColorFree(dpy, DefaultVisual(dpy, DefaultScreen(dpy)),
		 None, $xcol+i);
        }
}


@proc draw_handle($, uint x, uint y, uint radius )
{
    TRACE(1,"POS: %d (rel:%d)", x, $handlePos );

    XFillRectangle( XtDisplay($), $pix->p, $gc[BG],
                    0, 0, $width, $height );

    cairo_t *c;
    c=cairo_create($pix->cs);
    cairo_set_line_width (c, $lineWidth);
    cairo_set_source_rgb_from_pixel_dpy($pix->dpy,c,$pix->fg);
    cairo_move_to(c, 0, $height/2);
    cairo_line_to(c, $width, $height/2);
    cairo_close_path(c);
    cairo_stroke (c);

    cairo_arc (c, x, y, radius, 0.0  * (M_PI/180.0), 360.0  * (M_PI/180.0) );
    cairo_fill(c);

    cairo_show_page(c);
    cairo_destroy(c);
}


@ draw the pixmap with new handle position
  returns 1 if the pixmap has changed
@proc int update_pixmaps($)
{
    /* handlePos: 0..10000 */
    /* backup: drawn_handle */

    /* cache */
    if( $drawn_handle == $handlePos ) return 0;
    $drawn_handle = $handlePos;

    /* calc */
    int w,x,y,radius;
    radius = $handleSize / 2;

    w = $width - $handleSize - 4; /* 2pix border left + right */
    x = w * $handlePos / 10000;
    x += 2 + radius;
    y = $height / 2;
    draw_handle($,x,y,radius);
    return 1;
}


@ create a new pixmap the size of the widget if the pixmap is not already existent
@proc alloc_pixmaps($)
{
    TRACE(1,"%dx%d", $width, $height );
    if( $pix ) {
        if( $pix->w == $width && $pix->h == $height ) return;
        xtcairo_destroy_pixmap($pix);
    }
    $pix = xtcairo_create_pixmap($,$width,$height);
}


@TRANSLATIONS
@trans <Btn1Down>:     set_cursor()
@trans <Btn1Motion>:   set_cursor()
@trans <Btn1Up>:       notify()

@ACTIONS

@proc notify
{
    XtCallCallbackList( $, $callback, (XtPointer)$handlePos );
}


@proc set_cursor
{

    int xb = event->xbutton.x;
    int offset = $handleSize/2 + 2;
    if( xb < offset ) { xb=0; goto paint_handle; }
    if( xb > $width - offset ) { xb = 10000; goto paint_handle; }

    xb -=  offset;
    xb *= 10000;
    xb /= ($width - 2 * offset);


 paint_handle:
    if( xb == $drawn_handle ) return;
    $handlePos = xb;
    paint($);
}

@IMPORTS
@incl <assert.h>
@incl <X11/Intrinsic.h>
@incl <X11/Xmu/Converters.h>
@incl <X11/Xft/Xft.h>
@incl "converters.h"
@incl "xutil.h"
@incl "mls.h"

@incl <math.h>
@incl <cairo/cairo.h>
@incl <cairo/cairo-xlib-xrender.h>
@incl <cairo/cairo-xlib.h>
@incl "xt_cairo.h"
